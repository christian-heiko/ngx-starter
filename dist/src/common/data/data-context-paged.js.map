{"version":3,"sources":["../../../../src/common/data/data-context-paged.ts"],"names":[],"mappings":"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","file":"data-context-paged.js","sourceRoot":"","sourcesContent":["\nimport {Observable} from \"rxjs\";\nimport {Filter} from \"./filter\";\nimport {Page, Pageable, Sort} from \"./page\";\nimport {DataContext} from \"./data-context\";\n\n\n\n/**\n * Extends a simple flat list data-context with pagination support.\n *\n */\nexport class PagedDataContext<T> extends DataContext<T> {\n\n  private pageCache : Map<number, Observable<Page<T>>> = new Map();\n  private latestPage : number = 0;\n\n  public offset: number = 0;\n  public limit: number = 30;\n\n\n  constructor(\n    private pageLoader : (pageable : Pageable, filters? : Filter[]) => Observable<Page<T>>,\n    pageSize : number,\n    _indexFn? : ((item:T) => any),\n    _localSort? : ((a: T, b: T) => number)){\n    super(()=>Observable.empty(), _indexFn, _localSort);\n    this.limit = pageSize;\n  }\n\n  /**\n   * Resets the data-context to a new filter / sorting strategy.\n   * All current data will be discarded.\n   *\n   * @param {Sort[]} sorts\n   * @param {Filter[]} filters\n   */\n  public start(sorts? : Sort[], filters? : Filter[]){\n    this.total = 0;\n    this.rows = [];\n    this.pageCache = new Map();\n    this.sorts = sorts;\n    this.filters = filters;\n    this.fetchPage(0, this.limit);\n  }\n\n  /**\n   * Load the next chunk of data.\n   * Useful for infinite scroll like data flows.\n   *\n   */\n  public loadMore() : void {\n    if(this.hasMoreData){\n      console.log(\"loading more...\" + this.latestPage);\n\n      if(this.loadingIndicator) return;\n      let nextPage = this.latestPage + 1;\n      this.fetchPage(nextPage, this.limit);\n    }\n  }\n\n\n  public get hasMoreData() : boolean {\n    return this.total > this.rows.length;\n  }\n\n  private fetchPage(pageIndex : number, pageSize : number) : void {\n\n    let pageRequest = new Pageable(pageIndex, pageSize, this.sorts);\n\n    if(this.pageCache.has(pageIndex)){\n      // Page already loaded - skipping request!\n    }else{\n\n      this.loadingIndicator = true;\n\n      console.log(`loading page ${pageIndex} using sort:`, this.sorts);\n\n      let page = this.pageLoader(pageRequest, this.filters);\n\n      this.pageCache.set(pageIndex, page);\n\n      page.subscribe((page: Page<T>) => {\n\n        console.log(\"Got data: \", page);\n\n        this.populatePageData(page);\n\n        if(this.latestPage < page.number){\n          this.latestPage = page.number; // TODO This might cause that pages are skipped\n        }\n\n        this.loadingIndicator = false;\n      }, err => {\n        this.loadingIndicator = false;\n        console.error('Failed to query data', err);\n      });\n    }\n  }\n\n  /**\n   * Load the data from the given page into the current data context\n   * @param {Page<T>} page\n   */\n  private populatePageData(page: Page<T>){\n\n    try{\n      this.total = page.totalElements;\n      const start = page.number * page.size;\n\n      let newRows = [...this.rows];\n      for (let i = 0; i < page.content.length; i++) {\n        let item = page.content[i];\n        newRows[i+start] = item;\n        this.indexItem(item);\n      }\n      this.rows = newRows;\n    }catch(err){\n      console.error('Failed to populate data with page', page, err);\n    }\n  }\n\n\n}\n"]}