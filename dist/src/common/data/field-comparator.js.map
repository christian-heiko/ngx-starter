{"version":3,"sources":["../../../../src/common/data/field-comparator.ts"],"names":[],"mappings":"AAAA;;GAEG;AAGH;;;;;;;;;;;;GAYG;AACH;IAAA;IAkDA,CAAC;IAhDC;;;;;OAKG;IACW,2BAAS,GAAvB;QAAwB,gBAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,2BAAmB;;QACzC,IAAI,KAAK,GAAG,MAAM,CAAC;QACnB,MAAM,CAAC,UAAU,IAAI,EAAE,IAAI;YACzB,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC;YACzD;;eAEG;YACH,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,kBAAkB,EAAE,CAAC;gBAC9C,MAAM,GAAG,iBAAiB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7D,CAAC,EAAE,CAAC;YACN,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAA;IACH,CAAC;IAGc,6BAAW,GAA1B,UAA2B,QAAiB;QAC1C,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACvB,SAAS,GAAG,CAAC,CAAC,CAAC;YACf,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;YACV,IAAI,MAAM,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC5D,IAAI,MAAM,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC5D,IAAI,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5B,CAAC,CAAC;IACJ,CAAC;IAGc,iCAAe,GAA9B,UAA+B,GAAS,EAAE,QAAiB;QACzD,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,QAAQ,GAAS,GAAG,CAAC;QAEzB,GAAG,CAAC,CAAa,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAjB,IAAI,IAAI,cAAA;YACX,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEH,wBAAC;AAAD,CAlDA,AAkDC,IAAA","file":"field-comparator.js","sourceRoot":"","sourcesContent":["/**\n * Created by isnull on 22.03.17.\n */\n\n\n/**\n * Provides the ability to build a sorting comparator dynamically using\n * a given array of fields / additional syntax.\n *\n * - Supports ASC / DESC\n * - Supports multiple fields\n * - Supports nested fields\n *\n * Example:\n *\n * ComparatorBuilder.fieldSort('simple', '-reveresed', 'some.very.deep.nested.path')\n *\n */\nexport class ComparatorBuilder {\n\n  /**\n   * Dynamically builds a comparator function, using the given fields for sorting.\n   *\n   * @param fields One or more field name to sort.\n   * @returns {(obj1:any, obj2:any)=>number}\n   */\n  public static fieldSort(...fields: string[]) : (a: any, b: any) => number{\n    let props = fields;\n    return function (obj1, obj2) {\n      let i = 0, result = 0, numberOfProperties = props.length;\n      /* try getting a different result from 0 (equal)\n       * as long as we have extra properties to compare\n       */\n      while (result === 0 && i < numberOfProperties) {\n        result = ComparatorBuilder.dynamicSort(props[i])(obj1, obj2);\n        i++;\n      }\n      return result;\n    }\n  }\n\n\n  private static dynamicSort(property : string) : (a: any, b: any) => number {\n    let sortOrder = 1;\n    if(property[0] === \"-\") {\n      sortOrder = -1;\n      property = property.substr(1);\n    }\n\n    return (a, b) => {\n      let aValue = ComparatorBuilder.resolveProperty(a, property);\n      let bValue = ComparatorBuilder.resolveProperty(b, property);\n      let result = (aValue < bValue) ? -1 : (aValue > bValue) ? 1 : 0;\n      return result * sortOrder;\n    };\n  }\n\n\n  private static resolveProperty(obj : any, property : string) : any {\n    let parts = property.split('.');\n    let resolved : any = obj;\n\n    for (let part of parts) {\n      resolved = resolved[part];\n    }\n    return resolved;\n  }\n\n}\n"]}