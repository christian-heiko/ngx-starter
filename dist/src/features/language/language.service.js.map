{"version":3,"sources":["../../../../src/features/language/language.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAA,gBAAE,EAAgB,MAAM,qBAAA,CAAsB;AACrD,OAAO,EAAA,eAAE,EAAe,MAAM,kCAAA,CAAmC;AAGjE;IAUI;;;;gFAI4E;IAE5E,yBACY,SAA4B,EAC5B,UAA4B;QAD5B,cAAS,GAAT,SAAS,CAAmB;QAC5B,eAAU,GAAV,UAAU,CAAkB;QAhBxC;;;;oFAI4E;QAEpE,yBAAoB,GAAY,UAAU,CAAC;QAYjD,OAAO,CAAC,GAAG,CAAC,+CAA+C,EAAE,UAAU,CAAC,CAAA;IAC1E,CAAC;IAaD,sBAAW,4CAAe;QAX1B;;;;oFAI4E;QAE5E;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;QACtC,CAAC;QAED;;;;;WAKG;aACH,UAA2B,IAAa;YACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;;;OAVA;IAiBD,sBAAW,sCAAS;QALpB;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QACrC,CAAC;;;OAAA;IAED;;;;;OAKG;IACI,0CAAgB,GAAvB,UAAwB,IAAY;QAChC,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,IAAI,CAAC;IACzC,CAAC;IAOD,sBAAW,2CAAc;QALzB;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QAC7D,CAAC;;;OAAA;IAED;;;;gFAI4E;IAEpE,qCAAW,GAAnB,UAAoB,IAAY;QAC5B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAEE,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,eAAe,GAAG;KACxB,EAH6F,CAG7F,CAAC;IACF,sBAAC;CA/FD,AA+FC,IAAA;SA/FY,eAAe","file":"language.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {WebLocalStorage} from \"@elderbyte/ngx-simple-webstorage\";\n\n\nexport class LanguageService {\n\n    /***************************************************************************\n     *                                                                         *\n     * Fields                                                                  *\n     *                                                                         *\n     **************************************************************************/\n\n    private LANGUAGE_STORAGE_KEY : string = \"language\";\n\n    /***************************************************************************\n     *                                                                         *\n     * Constructors                                                            *\n     *                                                                         *\n     **************************************************************************/\n\n    constructor(\n        private translate : TranslateService,\n        private webStorage : WebLocalStorage\n    ){\n      console.log('Initializing language service with webstore: ', webStorage)\n    }\n\n    /***************************************************************************\n     *                                                                         *\n     * Public API                                                              *\n     *                                                                         *\n     **************************************************************************/\n\n    /**\n     * Returns the key of the currently applied language.\n     *\n     * @returns {string} language key\n     */\n    public get currentLanguage() : string {\n        return this.translate.currentLang;\n    }\n\n    /**\n     * Applies the given language which will immediately get apparent\n     * in the UI.\n     *\n     * @param {string} lang language key\n     */\n    public set currentLanguage(lang : string) {\n        this.setLanguage(lang);\n    }\n\n    /**\n     * Returns an array of all available language keys.\n     *\n     * @returns {Array<string>} e.g. ['en', 'de', 'fr']\n     */\n    public get languages() : Array<string> {\n        return this.translate.getLangs();\n    }\n\n    /**\n     * Checks if the given language is currently active.\n     *\n     * @param {string} lang language key\n     * @returns {boolean} true if given language is currently active\n     */\n    public isLanguageActive(lang: string) : boolean {\n        return this.currentLanguage === lang;\n    }\n\n    /**\n     * Returns the key of the last applied language.\n     *\n     * @returns {string} language key of last applied language\n     */\n    public get lastConfigured() : string {\n        return this.webStorage.getItem(this.LANGUAGE_STORAGE_KEY)\n    }\n\n    /***************************************************************************\n     *                                                                         *\n     * Private Methods                                                         *\n     *                                                                         *\n     **************************************************************************/\n\n    private setLanguage(lang: string) : void {\n        this.translate.use(lang);\n        this.webStorage.setItem(this.LANGUAGE_STORAGE_KEY, lang);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateService, },\n{type: WebLocalStorage, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}