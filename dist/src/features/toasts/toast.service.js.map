{"version":3,"sources":["../../../../src/features/toasts/toast.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAA,OAAE,EAAmB,MAAM,MAAA,CAAO;AAEzC,OAAO,EAAA,SAAE,EAAS,MAAM,cAAA,CAAe;AACvC,OAAO,EAAA,gBAAE,EAAgB,MAAM,qBAAA,CAAsB;AAGrD,cAAc,cAAA,CAAe;AAI7B;IAIE,sBACY,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;QAH/B,WAAM,GAAG,IAAI,OAAO,EAAS,CAAC;IAInC,CAAC;IAEJ,iDAA0B,GAA1B;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAED,uCAAgB,GAAhB,UAAiB,GAAU;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,GAAW;QAC1B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,+BAAQ,GAAf,UAAgB,MAAc,EAAE,iBAA0B;QAA1D,iBAIC;QAHG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,SAAS,CACtD,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAvB,CAAuB,EAChC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC,CAAC,iCAAiC;IAC/E,CAAC;IAEM,mCAAY,GAAnB,UAAoB,GAAW,EAAE,KAAY;QACzC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,gCAAS,GAAhB,UAAiB,MAAc,EAAE,iBAAuB,EAAE,KAAY;QAAtE,iBAQC;QANG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,SAAS,CACtD,UAAC,GAAG;YACF,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC1B,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;QAC1B,CAAC,EACD,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAA3B,CAA2B,CAAC,CAAC,CAAC,iCAAiC;IAChF,CAAC;IAIO,oCAAa,GAArB,UAAsB,GAAY;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,SAAS,CAAC,OAAO;SAC1B,CAAC,CAAC;IACP,CAAC;IAEO,qCAAc,GAAtB,UAAuB,GAAY;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,SAAS,CAAC,KAAK;SACxB,CAAC,CAAC;IACP,CAAC;IAEO,uCAAgB,GAAxB,UAAyB,GAAY,EAAE,iBAAsB;QACzD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;IAEtD,CAAC;IAEI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,EAF6F,CAE7F,CAAC;IACF,mBAAC;CArED,AAqEC,IAAA;SArEY,YAAY","file":"toast.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport {Subject, Observable} from \"rxjs\";\nimport {Toast} from \"./toast\";\nimport {ToastType} from \"./toast-type\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\nexport * from \"./toast\";\nexport * from \"./toast-type\";\n\n\n\nexport class ToastService {\n\n  private subjet = new Subject<Toast>();\n\n  constructor(\n      private translate: TranslateService\n  ) {}\n\n  getNotificationsObservable(): Observable<Toast> {\n    return this.subjet.asObservable();\n  }\n\n  pushNotification(msg: Toast) {\n    this.subjet.next(msg);\n  }\n\n  public pushInfoRaw(msg: string){\n      this.pushInfoToast(msg);\n  }\n\n  public pushInfo(msgKey: string, interpolateParams?: Object) {\n      this.translateMessage(msgKey, interpolateParams).subscribe(\n          (res) => this.pushInfoToast(res),\n          (err) => this.pushInfoToast(msgKey)); // no translation found, push key\n  }\n\n  public pushErrorRaw(msg: string, error? : any){\n      console.error(msg, error);\n      this.pushInfoToast(msg);\n  }\n\n  public pushError(msgKey: string, interpolateParams?: any, error? : any){\n\n      this.translateMessage(msgKey, interpolateParams).subscribe(\n          (res) => {\n            console.error(res, error);\n            this.pushErrorToast(res)\n          },\n          (err) => this.pushErrorToast(msgKey)); // no translation found, push key\n  }\n\n\n\n  private pushInfoToast(msg : string){\n      this.subjet.next({\n          message: msg,\n          type: ToastType.Success\n      });\n  }\n\n  private pushErrorToast(msg : string){\n      this.subjet.next({\n          message: msg,\n          type: ToastType.Error\n      });\n  }\n\n  private translateMessage(msg : string, interpolateParams: any) : Observable<string> {\n      return this.translate.get(msg, interpolateParams);\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}