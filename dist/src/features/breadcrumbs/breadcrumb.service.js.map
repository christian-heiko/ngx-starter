{"version":3,"sources":["../../../../src/features/breadcrumbs/breadcrumb.service.ts"],"names":[],"mappings":"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","file":"breadcrumb.service.js","sourceRoot":"","sourcesContent":["\n\nimport {Injectable} from \"@angular/core\";\n\n\nexport class BreadcrumbContext {\n\n  private exactPathReplacers : Map<string, string | null> =  new Map();\n  private exactPathHandlers : Map<string, any> =  new Map();\n  private dynamicHandlers : {(path: string) : IBreadcrumb;}[] = [];\n\n  public prefix : IBreadcrumb;\n\n\n  constructor(){\n    this.replaceExactPath('/app', null);\n  }\n\n  public replaceExactPath(exactPath : string, label : string | null){\n    this.exactPathReplacers.set(exactPath, label);\n  }\n\n  public handleExactPath(exactPath : string, handler: (path: string) => IBreadcrumb){\n    this.exactPathHandlers.set(exactPath, handler);\n  }\n\n  public addDynamicHandler(handler: (path: string) => IBreadcrumb){\n    this.dynamicHandlers.push(handler);\n  }\n\n\n  public  buildCrumb(url : string) : IBreadcrumb | null {\n\n    if(this.exactPathReplacers.has(url)){\n      let replacement = this.exactPathReplacers.get(url);\n      if(replacement){\n        return this.build(url, replacement);\n      }else{\n        return null;\n      }\n    }\n\n\n    let handler = this.exactPathHandlers.get(url);\n    if(handler){\n      return handler(url);\n    }\n\n    for(let dh of this.dynamicHandlers){\n      let dynamicReplacement = dh(url);\n      if(dynamicReplacement){\n        return dynamicReplacement;\n      }\n    }\n    return this.buildCrumbFallback(url);\n  }\n\n  private  buildCrumbFallback(url : string) : IBreadcrumb{\n    let parts = url.split('/');\n    let last = parts[parts.length-1];\n\n    last = last.split('(')[0];\n\n    return this.build(url,  last);\n  }\n\n  private build(url : string, label : string) : IBreadcrumb {\n    return new Breadcrumb(label, url);\n  }\n}\n\n\n\nexport interface IBreadcrumb {\n  label: string;\n  url: string;\n}\n\nexport class Breadcrumb implements IBreadcrumb {\n  constructor(\n    public label: string,\n    public url: string,\n  ){ }\n}\n\n\nexport class BreadcrumbService {\n\n  private context : BreadcrumbContext;\n\n  constructor() {\n    this.context = new BreadcrumbContext();\n  }\n\n  public generateBreadcrumbs(url : string) : IBreadcrumb[] {\n    let crumbs : IBreadcrumb[] = [];\n\n    let beforeSubOutletsUrl = url.split('(')[0];\n    this.generateBreadcrumbsRecursive(beforeSubOutletsUrl, crumbs);\n    return crumbs;\n  }\n\n  private generateBreadcrumbsRecursive(url : string, crumbs : IBreadcrumb[])  {\n\n    let crumb = this.buildCrumb(url);\n    if(crumb){\n      crumbs.unshift(crumb);\n    }\n\n    if (url.lastIndexOf('/') > 0) {\n      this.generateBreadcrumbsRecursive(\n        url.substr(0, url.lastIndexOf('/')),\n        crumbs\n      ); //Find last '/' and add everything before it as a parent route\n    } else if (this.context && this.context.prefix) {\n      crumbs.unshift(this.context.prefix);\n    }\n  }\n\n  private  buildCrumb(url : string) : IBreadcrumb | null {\n    return this.context.buildCrumb(url);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}