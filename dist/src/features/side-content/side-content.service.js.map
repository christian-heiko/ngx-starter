{"version":3,"sources":["../../../../src/features/side-content/side-content.service.ts"],"names":[],"mappings":"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","file":"side-content.service.js","sourceRoot":"","sourcesContent":["\nimport {Injectable} from \"@angular/core\";\nimport {ActivatedRouteSnapshot, NavigationEnd, Router, RouterStateSnapshot} from \"@angular/router\";\n\n/**\n * This service manages the side content.\n * This is usually the left side which is a 'side nav' and the right side which shows detail information.\n */\n\nexport class SideContentService {\n\n  public navigationOpen : boolean = false;\n  public sideContentOpen : boolean = false;\n\n  constructor(\n    private router: Router,\n  ){\n\n    this.router.events\n      .filter(event => event instanceof NavigationEnd)\n      .map(event => event as NavigationEnd)\n      .subscribe(event => {\n\n        if(this.isOutletActive('side')){\n          console.info('side outlet is active -> showing side content!');\n          this.showSideContent();\n        }else{\n          console.info('side outlet is NOT active -> HIDING side content!');\n          this.closeSideContent();\n        }\n        this.closeSideNav();\n      });\n  }\n\n\n  public toggleSidenav(){\n    this.navigationOpen = !this.navigationOpen;\n  }\n\n  public closeSideNav(){\n    this.navigationOpen = false;\n  }\n\n  public closeSideContent() {\n    console.log('hiding side content ...');\n    this.sideContentOpen = false;\n    this.router.navigate([{outlets: {'side': null}}])\n  }\n\n\n  isOutletActive(outlet : string) : boolean{\n    let rs : RouterStateSnapshot =  this.router.routerState.snapshot;\n    let snap : ActivatedRouteSnapshot = rs.root;\n    return this.isOutletActiveRecursive(snap, outlet);\n  }\n\n  isOutletActiveRecursive(root : ActivatedRouteSnapshot, outlet : string) : boolean{\n\n    console.log('--> ' + root.outlet);\n\n    if(root.outlet === outlet){\n      return true;\n    }\n\n    for(let c of root.children){\n      if(this.isOutletActiveRecursive(c, outlet)){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private showSideContent() {\n    console.log('showing side content ...');\n    this.sideContentOpen = true;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}